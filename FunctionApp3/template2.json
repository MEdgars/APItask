{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "metadata": {
        "description": "The name of the function app that you wish to create."
      }
    },
    "repoURL": {
      "type": "string",
      "defaultValue": "https://github.com/AzureBytes/functionshttpecho.git",
      "metadata": {
        "description": "The URL for the GitHub repository that contains the project to deploy."
      }
    },
    "workerSize": {
      "type": "string",
      "allowedValues": [
        "0",
        "1",
        "2"
      ],
      "defaultValue": "0",
      "metadata": {
        "description": "The instance size of the hosting plan (small, medium, or large)."
      }
    },
    "branch": {
      "type": "string",
      "defaultValue": "master",
      "metadata": {
        "description": "The branch of the GitHub repository to use."
      }
    },

    "sku": {
      "type": "string",
      "allowedValues": [
        "Free",
        "Shared",
        "Basic",
        "Standard"
      ],
      "defaultValue": "Standard",
      "metadata": {
        "description": "The pricing tier for the hosting plan."
      }
    },
    "databaseAccountName": {
      "type": "string",
      "metadata": {
        "description": "The Azure Cosmos DB database account name."
      }
    },

    "appSvcPlanName": {
      "type": "string",
      "metadata": {
        "description": "The name of the App Service Plan that will host the Web App."
      }
    },
    "svcPlanSize": {
      "type": "string",
      "defaultValue": "F1",
      "metadata": {
        "description": "The instance size of the App Service Plan."
      }
    },
    "svcPlanSku": {
      "type": "string",
      "allowedValues": [
        "Free",
        "Shared",
        "Basic",
        "Standard",
        "Premium"
      ],
      "defaultValue": "Free",
      "metadata": {
        "description": "The pricing tier of the App Service plan."
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },
    {
      "accountSasProperties": {
        "type": "object",
        "defaultValue": {
          "signedServices": "b",
          "signedPermission": "rw",
          "signedExpiry": "2019-03-01T00:00:01Z",
          "signedResourceTypes": "o"
        }
      }
    },
    "webAppName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Web App."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "databaseAccountTier": "Standard",
    "functionAppName": "[parameters('appName')]",
    "hostingPlanName": "[concat(parameters('appName'), uniqueString(resourceGroup().id), '-plan')]",
    "storageAccountName": "[concat(uniquestring(resourceGroup().id), 'functions')]",
    "cosmosDBInstanceName": "[concat( parameters('databaseAccountName'),uniqueString(resourceGroup().id) )]",
    "containerName":  "webcontainer"

  },
  "resources": [
    {
      "apiVersion": "2015-04-08",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "name": "[variables('cosmosDBInstanceName')]",
      "location": "[parameters('location')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "name": "[variables('cosmosDBInstanceName')]",
        "databaseAccountOfferType": "[variables('databaseAccountTier')]",
        "enableAutomaticFailover": false,
        "enableMultipleWriteLocations": false,
        "isVirtualNetworkFilterEnabled": false,
        "virtualNetworkRules": [],
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session",
          "maxIntervalInSeconds": 5,
          "maxStalenessPrefix": 100
        },
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "provisioningState": "Succeeded",
            "failoverPriority": 0
          }
        ]
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2015-08-01",
      "name": "[concat(variables('hostingPlanName') )]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "S1",
        "tier": "Standard",
        "size": "S1",
        "family": "S",
        "capacity": 0
      },
      "properties": {
        "name": "[concat(variables('hostingPlanName') )]",
        "workerTierName": null,
        "adminSiteName": null,
        "hostingEnvironmentProfile": null,
        "perSiteScaling": false,
        "reserved": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2015-06-15",
      "location": "[parameters('location')]",
      
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      },
      "resources": [
        {
          "name": "[concat('default/', variables('containerName'))]",
          "type": "blobServices/containers",
          "apiVersion": "2018-07-01",
          "dependsOn": [
            "[variables('storageAccountName')]"
          ]
        }
      ]
    },

    {
      "type": "Microsoft.Web/Sites",
      "apiVersion": "2015-08-01",
      "name": "[concat( parameters('webAppName'),uniqueString(resourceGroup().id) )]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Web/serverFarms/', variables('hostingPlanName'))]",
        "[concat( variables('cosmosDBInstanceName')) ]"
      ],
      "properties": {
        "name": "[concat( parameters('webAppName'),uniqueString(resourceGroup().id) )]",

        "serverFarmId": "[concat(variables('hostingPlanName') ) ]",
        "siteConfig": {
          "phpVersion": "off",
          "appSettings": [
            {
              "Name": "DOCUMENTDB_ENDPOINT",
              "Value": "[reference(variables('cosmosDBInstanceName')).documentEndpoint]"
            },
            {
              "Name": "DOCUMENTDB_PRIMARY_KEY",
              "Value": "[listkeys(variables('cosmosDBInstanceName'), '2015-04-08').primaryMasterKey]"

            }
           


          ]

        }
      }
    },

    {
      "apiVersion": "2015-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "name": "[variables('functionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "hostingEnvironment": "",
        "clientAffinityEnabled": false,
        "siteConfig": {
          "alwaysOn": true,
          "cors": {
            "allowedOrigins": [
              "*"
            ]
          },
          "appSettings": [
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "CosmosDBConnection",
              "value": "[concat('AccountEndpoint=', reference(variables('cosmosDBInstanceName')).documentEndpoint, ';AccountKey=', listkeys(variables('cosmosDBInstanceName'), '2015-04-08').primaryMasterKey,';')]"
            }
          ]

        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
      
    }
  ]
}
